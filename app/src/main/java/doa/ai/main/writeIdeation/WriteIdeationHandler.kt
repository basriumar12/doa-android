package doa.ai.main.writeIdeationimport android.content.Contextimport android.graphics.Pointimport android.graphics.drawable.BitmapDrawableimport android.os.Bundleimport android.util.Logimport android.view.*import android.widget.LinearLayoutimport android.widget.PopupWindowimport android.widget.Toastimport androidx.appcompat.app.AppCompatActivityimport com.google.gson.Gsonimport doa.ai.Rimport doa.ai.database.AppDatabaseimport doa.ai.database.modelDB.NotesEntryimport doa.ai.extentions.AppExecutorsimport doa.ai.main.notes.ideation.model.Resultimport doa.ai.utils.pref.SavePrefTokenLoginimport kotlinx.android.synthetic.main.activity_write_ideation.*import kotlinx.android.synthetic.main.view_labels.view.*import doa.ai.MainActivityimport android.content.Intentimport com.vincent.filepicker.activity.BaseActivityimport doa.ai.main.notes.NotesActivityclass WriteIdeationActivity: doa.ai.base.BaseActivity(), WriteIdeationView {    private lateinit var mDB: AppDatabase    private var menu : Menu? = null    private var status : String? =""    private var titleIdea: String? = ""    private var imageIdea: String? = ""    private var labelIdea: String? = ""    private var deskIdea: String? = ""    private var idIdea: Int? = 0    lateinit var presenter : WriteIdeationPresenter    var token = ""    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(doa.ai.R.layout.activity_write_ideation)        setSupportActionBar(toolbarWriteIdeation)        supportActionBar?.setDisplayHomeAsUpEnabled(true)        supportActionBar?.setDisplayShowHomeEnabled(true)        supportActionBar?.setDisplayShowTitleEnabled(false)        presenter = WriteIdeationPresenter()        presenter.ideationContract()        titleIdea = intent.getStringExtra("title")        idIdea = intent.getIntExtra("id",0)        imageIdea = intent.getStringExtra("image")        labelIdea = intent.getStringExtra("label")        deskIdea = intent.getStringExtra("desc")        editTitle.setText(titleIdea)        textLabels.setText(labelIdea)        editWriteIdea.setText(deskIdea)        token = SavePrefTokenLogin().getTokenLogin()        mDB = AppDatabase.getInstance(this)        setContentView()    }    override fun onStart() {        super.onStart()        presenter.attachView(this)    }    override fun onStop() {        super.onStop()        presenter.detachView()    }    override fun onCreateOptionsMenu(menu: Menu): Boolean {        val inflater = menuInflater        inflater.inflate(doa.ai.R.menu.menu_write_ide, menu)        return super.onCreateOptionsMenu(menu)    }    private fun setContentView() {        imageWriteIdeation.visibility = View.GONE        labelLinear.setOnClickListener { view ->            val location = IntArray(2)            view.getLocationOnScreen(location)            val point = Point()            point.x = location[0]            point.y = location[1]            popUpMenu(point)        }    }    private fun popUpMenu(point: Point){        val inflater = getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater        val layout = inflater.inflate(doa.ai.R.layout.view_labels,null)        val popUp = PopupWindow(this)        popUp.contentView = layout        popUp.width = LinearLayout.LayoutParams.MATCH_PARENT        popUp.height = LinearLayout.LayoutParams.WRAP_CONTENT        popUp.isFocusable = true        val x = 0        val y = 80        popUp.run {            setBackgroundDrawable(BitmapDrawable())            showAtLocation(labelLinear,Gravity.NO_GRAVITY, point.x + x, point.y + y)        }        layout.labelLinearBusiness.setOnClickListener {            popUp.dismiss()            textLabels.text = getString(doa.ai.R.string.business)        }        layout.labelLinearMarket.setOnClickListener {            popUp.dismiss()            textLabels.text = getString(doa.ai.R.string.market)        }        layout.labelLinearStrategy.setOnClickListener {            popUp.dismiss()            textLabels.text = getString(doa.ai.R.string.strategy)        }        layout.labelLinearFinancial.setOnClickListener {            popUp.dismiss()            textLabels.text = getString(doa.ai.R.string.financial)        }    }    override fun onOptionsItemSelected(item: MenuItem?): Boolean {        val id = item?.itemId        return when(id){            android.R.id.home ->{                val url = ""                val title = editTitle.text.toString()                val desc = editWriteIdea.text.toString()                val label = textLabels.text.toString()                var labels = listOf(label)                presenter.postIdeation("token $token", desc,title,labels)//                var notesEntry = NotesEntry(0, url, title, desc,label,"0")//                    AppExecutors.instance.diskIO().execute {//                        if (idIdea?.equals(0)!!) {////                              mDB.appsDao().insertNotes(notesEntry)//                        } else{//                             notesEntry = NotesEntry(idIdea!!.toInt(), url, title, desc,label,"0")//                            mDB.appsDao().updateNotes(notesEntry)//                        }//                    }                    finish()                true            }else -> super.onOptionsItemSelected(item)        }    }    override fun onBackPressed() {        super.onBackPressed()        val url = ""        val title = editTitle.text.toString()        val desc = editWriteIdea.text.toString()        val label = textLabels.text.toString()        var labels = listOf(label)        presenter.postIdeation("token $token", desc,title,labels)//        var notesEntry = NotesEntry(0, url, title, desc,label,"0")//            AppExecutors.instance.diskIO().execute {//                if (idIdea?.equals(0)!!) {//                    mDB.appsDao().insertNotes(notesEntry)////                } else{//                    notesEntry = NotesEntry(idIdea!!.toInt(), url, title, desc,label,"0")//                    mDB.appsDao().updateNotes(notesEntry)//                }//            }            finish()    }    override fun showSucces(data: Result) {    }    override fun failed() {    }    override fun message(message: String) {        Log.e("Tag","sukses add idea $message")    }    override fun showLoad() {        progressbar_write_idea.visibility = View.VISIBLE    }    override fun hideLoad() {        progressbar_write_idea.visibility = View.GONE    }}